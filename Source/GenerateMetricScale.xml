<gel:script 
 xmlns:core="jelly:core" 
    xmlns:gel="jelly:com.niku.union.gel.GELTagLibrary"
    xmlns:soap="jelly:com.niku.union.gel.SOAPTagLibrary"
    xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
    xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/"	    
    xmlns:sql="jelly:sql"
    xmlns:xog="http://www.niku.com/xog"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:file="jelly:com.niku.union.gel.FileTagLibrary"
    xmlns:util="jelly:util"
    xmlns:q="http://www.niku.com/xog/Query">
	
   	<!--============================================================-->
	<!-- Package: Strategic Alignment 5.1 							-->
	<!-- Process: Strategic Alignment Metric Initialize				-->
	<!-- Step	: Initialize Metric									-->
	<!-- Action	: Generate Metric Scale								-->
   	<!--============================================================-->
	<!-- Object : Investment Alignment Metric (Strat_align_metric)  -->
   	<!--============================================================-->
	<!-- Initialize the Alignment Metric Scale object with empty    -->
	<!-- records 													-->
   	<!--============================================================-->
	
	<core:set var="vMetricID" value="${gel_objectInstanceId}"/>
	<core:if test="${DebugLevel &gt; 0}">
		<gel:log level="debug" message="Start Script"/>
		<gel:log level="debug" message=">>Metric ID           : ${vMetricID}"/> 
		<gel:log level="debug" message=">>Persisted XOG URL   : ${XOGURL}"/> 
		<gel:log level="debug" message=">>Persisted LOG Folder: ${XOGlogFolder}"/> 
		<gel:log level="debug" message=">>Persisted WEB Folder: ${XOGwebFolder}"/> 
		<gel:log level="debug" message=">>Persisted SessionID : ${sessionID}"/> 
		<gel:log level="debug" message=">>Persisted DebugLevel: ${DebugLevel}"/> 
	</core:if>


	<gel:setDataSource dbId="Niku"/>

	<core:set var="vMetricNextNum00" value="ZZZ00001"/>
	<core:set var="vMetricNextNum10" value="ZZZ00002"/>
	<core:set var="vMetricNextNum20" value="ZZZ00003"/>
	<core:set var="vMetricNextNum30" value="ZZZ00004"/>
	<core:set var="vMetricNextNum40" value="ZZZ00005"/>
	<core:set var="vMetricNextNum50" value="ZZZ00006"/>
	<core:set var="vMetricNextNum60" value="ZZZ00007"/>
	<core:set var="vMetricNextNum70" value="ZZZ00008"/>
	<core:set var="vMetricNextNum80" value="ZZZ00009"/>
	<core:set var="vMetricNextNum90" value="ZZZ00010"/>
	<core:set var="vMetricNextNum100" value="ZZZ00011"/>
	
	<!-- SQL Server Compatibility -->
	<core:set var="sqlStatement">
		select  'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+2)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+3)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+4)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+5)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+6)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+7)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+8)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+9)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+10)),
				'ZZZ'+ REPLICATE('0', 5-LEN(LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+1)))) + LTRIM(RTRIM(CONVERT(INT, substring(max(code),4,5))+11))
		from odf_ca_Strat_metric_scale
		where code like 'ZZZ%'
	</core:set>
	<core:if test="${dbVendor=='oracle'}">
		<core:set var="sqlStatement">
			select  'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+1,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+2,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+3,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+4,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+5,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+6,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+7,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+8,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+9,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+10,'00000')), 
					'ZZZ'||trim(to_char(to_number(${subStringFunction}(max(code),4,5))+11,'00000'))
			from odf_ca_Strat_metric_scale
			where code like 'ZZZ%'
		</core:set>
	</core:if>

	<!-- Determine Next Numbers for UNIQUE_CODE -->
	<sql:query escapeText="false" var="vMetricNum">
		${sqlStatement}
	</sql:query>
	<core:forEach items="${vMetricNum.rowsByIndex}" var="row">
		<core:set var="vTest" value="${row[0]}"/>
		<core:if test="${vTest!='ZZZ'}"> 
			<core:set var="vMetricNextNum00" value="${row[0]}"/>
			<core:set var="vMetricNextNum10" value="${row[1]}"/>
			<core:set var="vMetricNextNum20" value="${row[2]}"/>
			<core:set var="vMetricNextNum30" value="${row[3]}"/>
			<core:set var="vMetricNextNum40" value="${row[4]}"/>
			<core:set var="vMetricNextNum50" value="${row[5]}"/>
			<core:set var="vMetricNextNum60" value="${row[6]}"/>
			<core:set var="vMetricNextNum70" value="${row[7]}"/>
			<core:set var="vMetricNextNum80" value="${row[8]}"/>
			<core:set var="vMetricNextNum90" value="${row[9]}"/>
			<core:set var="vMetricNextNum100" value="${row[10]}"/>
		</core:if>
		<core:if test="${DebugLevel &gt; 1}">
			<gel:log level="debug" message="MetricNextNum00: ${vMetricNextNum00}"/> 
			<gel:log level="debug" message="MetricNextNum10: ${vMetricNextNum10}"/> 
			<gel:log level="debug" message="MetricNextNum20: ${vMetricNextNum20}"/> 
			<gel:log level="debug" message="MetricNextNum30: ${vMetricNextNum30}"/> 
			<gel:log level="debug" message="MetricNextNum40: ${vMetricNextNum40}"/> 
			<gel:log level="debug" message="MetricNextNum50: ${vMetricNextNum50}"/> 
			<gel:log level="debug" message="MetricNextNum60: ${vMetricNextNum60}"/> 
			<gel:log level="debug" message="MetricNextNum70: ${vMetricNextNum70}"/> 
			<gel:log level="debug" message="MetricNextNum80: ${vMetricNextNum80}"/> 
			<gel:log level="debug" message="MetricNextNum90: ${vMetricNextNum90}"/> 
			<gel:log level="debug" message="MetricNextNum100: ${vMetricNextNum100}"/> 
		</core:if>
	</core:forEach>

	<sql:query escapeText="false" var="vMetric">
 		select SM.CODE, SM.NAME, U.USER_NAME, U.ID 
		from odf_ca_Strat_align_metric SM inner join cmn_sec_users U on u.ID = SM.CREATED_BY
		Where SM.id = ${vMetricID}
		and not exists (select 'x' from odf_ca_Strat_metric_scale where odf_parent_id = SM.id)
	</sql:query>
	<core:forEach items="${vMetric.rowsByIndex}" var="row">
		<core:set var="vMetricCODE">${row[0]}</core:set>
		<core:set var="vMetricNAME">${row[1]}</core:set>
		<core:set var="vUserName">${row[2]}</core:set>
		<core:set var="vUserID">${row[3]}</core:set>
		<core:if test="${DebugLevel &gt; 1}">
			<gel:log level="debug" message="Found Metric: ${vMetricID}-${vMetricCODE}-${vMetricNAME} UserName=${vUserName}-${vUserID}"/> 
		</core:if>
	
		<gel:parse var="v_xml_root">
			<NikuDataBus xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../xsd/nikuxog_customObjectInstance.xsd">
				<Header action="write" externalSource="NIKU"
					objectType="customObjectInstance" version="12.0.6.5471"/>
				<customObjectInstances objectCode="strat_metric_scale">
				</customObjectInstances>
			</NikuDataBus>
		</gel:parse>

		<core:set var="vScale" value="0"/>
		<core:while test="${11 &gt; vScale}"> 
			<core:set var="vScaleCode" value="0${vScale}"/>
			<core:if test="${vScale == 10}">
				<core:set var="vScaleCode" value="${vScale}"/>
			</core:if>
			<core:set var="vScaleValue" value="${vScale*10}"/>
			
			<gel:parse var="v_xml_instance">
				<instance instanceCode="${vMetricCODE}-${vScaleCode}" objectCode="strat_metric_scale"
					parentInstanceCode="${vMetricCODE}" parentObjectCode="strat_align_metric">
					<CustomInformation>
						<ColumnValue name="highvalue"/>
						<ColumnValue name="lowvalue"/>
						<ColumnValue name="odf_cncrt_parent_id"/>
						<ColumnValue name="odf_parent_id"/>
						<ColumnValue name="code">${vMetricCODE}-${vScaleCode}</ColumnValue>
						<ColumnValue name="name">${vMetricCODE}-${vScaleCode}</ColumnValue>
						<ColumnValue name="partition_code">NIKU.ROOT</ColumnValue>
						<ColumnValue name="metricvalue">${vScaleValue}</ColumnValue>
					</CustomInformation>
					<OBSAssocs completed="false"/>
					<Security>
						<UserSecurity rightCode="odf_cst_Strat_metric_scale_edit" userName="${vUserName}"/>
					</Security>
				</instance>
			</gel:parse>
			<gel:set insert="true" select="$v_xml_root/NikuDataBus/customObjectInstances" value="${v_xml_instance}"/>
			<core:set var="vScale" value="${vScale+1}"/>
		</core:while>
		
		<core:if test="${DebugLevel &gt; 1}">
			<gel:serialize var="${v_xml_root}" fileName="${XOGwebFolder}/XOGWrite_Metric_${vMetricID}.xml"/>
			<gel:log level="debug" message="XOG Write can be found at: ${XOGURL}/niku/XOGWrite_Metric_${vMetricID}.xml"/> 
		</core:if>
		
		<!-- Calling XOG-->
		<core:catch var="v_xog_exception">
			<soap:invoke endpoint="${XOGURL}/niku/xog" var="runresult">
				<soap:message>
					<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xog="http://www.niku.com/xog">
						<soapenv:Header>
							<xog:Auth>
								<xog:SessionID>${sessionID}</xog:SessionID>
							</xog:Auth>
						</soapenv:Header>
						<soapenv:Body>
							<gel:include select="$v_xml_root/NikuDataBus"/>
						</soapenv:Body>
					</soapenv:Envelope>
				</soap:message>
			</soap:invoke>
		</core:catch>
		<core:if test="${DebugLevel &gt; 1}">
			<gel:serialize var="${runresult}" fileName="${XOGwebFolder}/XOGResult_Metric_${vMetricID}.xml"/>
			<gel:log level="debug" message="XOG Results can be found at: ${XOGURL}/niku/XOGResult_Metric_${vMetricID}.xml"/> 
		</core:if>
		
	</core:forEach>

</gel:script>